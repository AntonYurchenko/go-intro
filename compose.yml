networks:
  go_intro:

services:

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - go_intro

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    hostname: kafka
    ports:
      - 9892:9892
    volumes:
      - ./data/kafka:/var/lib/kafka/data:rw
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9892
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 && kafka-topics --bootstrap-server localhost:9092 --create --if-not-exists --topic data --replication-factor 1 --partitions 1 "]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - go_intro
  
  postgres:
    container_name: postgres
    image: postgres:11.18-alpine
    ports:
      - 5432:5432
    volumes:
      - ./migrations/0001_up_schema.sql:/docker-entrypoint-initdb.d/0001_up_schema.sql:ro
      - ./data/postgres:/var/lib/postgresql/data:rw
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks: 
      - go_intro